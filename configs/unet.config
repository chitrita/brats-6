from dpipe_configs.assets.batch_iter.patch_3d import *
from .base import *

from builtins import int
from functools import partial

import torch
import torch.nn as nn
from torch.nn.functional import softmax

from brats.layers import ConvBlock3d, CenteredCrop
from brats.model_core import build_tnet
from dpipe.torch.utils import softmax_cross_entropy
from dpipe.train.lr_policy import Schedule

x_patch_sizes = [[96, 96, 96]]
y_patch_size = [64, 64, 64]

batch_size = 1

n_epochs = 120
n_iters_per_epoch = 200

lr_init = 0.1

epoch2lr_dec_mul = {
    90: 0.1,
    105: 0.1,
}

lr_policy = Schedule(
    lr_init=lr_init,
    epoch2lr_dec_mul=epoch2lr_dec_mul
)

optimize = torch.optim.SGD(
    # lazy
    lr=lr_init,
    momentum=0.9,
    nesterov=True
)

predictor_x_patch_sizes = [[128, 160, 128]]
predictor_y_patch_size = [96, 128, 96]

logits2pred = partial(softmax, dim=1)
logits2loss = softmax_cross_entropy

# MODEL
stride = 2
kernel_size = 3
padding = 1
get_activation = partial(nn.ReLU, inplace=True)

cb = partial(ConvBlock3d, kernel_size=kernel_size, padding=padding, get_activation=get_activation)
up = partial(nn.Upsample, scale_factor=stride)
down = partial(nn.MaxPool3d, kernel_size=stride)

a = int(np.add(n_chans_in, 16))

structure = [
    [[n_chans_in], [], [a]],
    [[n_chans_in, 32, 32], [], [64, 32, 16]],
    [[32, 64, 64], [], [128, 64, 32]],
    [[64, 128, 128], [], [256, 128, 64]],
    [[128], [256, 256, 128]]
]

model_core = nn.Sequential(
    build_tnet(structure, up=up, down=down, cb=cb),
    CenteredCrop([15, 15, 15]),
    ConvBlock3d(a, 8),
    ConvBlock3d(8, n_chans_out, kernel_size=1),
)
