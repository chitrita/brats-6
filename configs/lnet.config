from .dm import *
from dpipe_configs.assets.batch_iter.patch_3d import *

from functools import partial
from builtins import int

from dpipe.model_core.layers import PreActivation3d

n_epochs = 120
n_iters_per_epoch = 200

batch_size = 2

x_patch_sizes = [[146, 180, 146]]
y_patch_size = x_patch_sizes[0]

lr_init = 0.1

epoch2lr_dec_mul = {
    90: 0.1,
    105: 0.1,
}

predictor_x_patch_sizes = [[160, 190, 150]]
predictor_y_patch_size = [160, 190, 150]

# MODEL
structure = [32, 32, 32, 32, 32, 64, 64, 64, 64, 32]

kernel_size = 3
padding = 1
get_activation = partial(nn.ReLU, inplace=True)

cb = partial(ConvBlock3d, kernel_size=kernel_size, padding=padding, get_activation=get_activation)
rb = partial(ResBlock3d, kernel_size=kernel_size, padding=padding, get_activation=get_activation)
pa = partial(PreActivation3d, kernel_size=kernel_size, padding=padding, get_activation=get_activation)

n_chans_base = 16

inner_path = nn.Sequential(
    nn.Conv3d(n_chans_base, structure[0], stride=2, kernel_size=kernel_size, padding=padding),
    compose_blocks(structure, rb),
    nn.Upsample(scale_factor=2)
)

base_path = compose_blocks([n_chans_base, n_chans_base, n_chans_base], rb)

model_core = nn.Sequential(
    cb(n_chans_in, n_chans_base),
    SplitCat(inner_path, base_path),
    compose_blocks([int(np.add(n_chans_base, structure[-1])), n_chans_base, n_chans_base], rb),
    pa(n_chans_base, n_chans_out),
    nn.BatchNorm3d(n_chans_out),
)