from .base import *
from dpipe_configs.assets.model.torch_model import *
from dpipe_configs.assets.batch_iter.patch_3d_strat import *
from dpipe.batch_predict.patch_3d_fixed import Patch3DFixedPredictor

from functools import partial

import torch
import torch.nn as nn
from torch.nn.functional import softmax

from dpipe.model_core.layers import ConvBlock3d, ResBlock3d, compose_blocks, CenteredCrop, SplitCat, PreActivation3d
from dpipe.torch.utils import softmax_cross_entropy
from dpipe.train.lr_policy import Schedule

x_patch_sizes = [[57, 57, 57]]
y_patch_size = [9, 9, 9]

batch_size = 128

n_epochs = 120
n_iters_per_epoch = 200

# Batch iter
nonzero_fraction = 0.5

lr_init = 0.1

epoch2lr_dec_mul = {
    90: 0.1,
    105: 0.1,
}

lr_policy = Schedule(
    lr_init=lr_init,
    epoch2lr_dec_mul=epoch2lr_dec_mul
)

optimize = torch.optim.SGD(
    # lazy
    lr=lr_init,
    momentum=0.9,
    nesterov=True
)

predictor_x_patch_sizes = [[138, 138, 138]]
predictor_y_patch_size = [90, 90, 90]

batch_predict = Patch3DFixedPredictor(
    x_patch_sizes=predictor_x_patch_sizes,
    y_patch_size=predictor_y_patch_size,
    padding_mode="min",
)

# MODEL
init_structure = [n_chans_in, 30, 30]
structure = [30, 40, 40, 50]

get_activation = partial(nn.ReLU, inplace=True)

cb = partial(ConvBlock3d, kernel_size=3, get_activation=get_activation)
rb = partial(ResBlock3d, kernel_size=3, get_activation=get_activation)

path1 = nn.Sequential(
    CenteredCrop([16, 16, 16]),
    *compose_blocks(init_structure, get_block=cb),
    *compose_blocks(structure, get_block=rb),
)

path2 = nn.Sequential(
    nn.AvgPool3d(kernel_size=3),
    *compose_blocks(init_structure, get_block=cb),
    *compose_blocks(structure, get_block=rb),
    nn.Upsample(scale_factor=3)
)

inner = SplitCat(path1, path2)

model_core = nn.Sequential(
    inner,
    rb(100, 150, kernel_size=1, get_activation=get_activation),
    nn.BatchNorm3d(150),
    get_activation(),
    nn.Conv3d(150, n_chans_out, kernel_size=1),
    nn.BatchNorm3d(n_chans_out),
)
